1. Function getPriority is work fine with me but let shorten the function in another way: 
const getPriority = (blockchain: string): number => {
	const priorityMap: Record<string, number> = {
	  Osmosis: 100,
	  Ethereum: 50,
	  Arbitrum: 30,
	  Zilliqa: 20,
	  Neo: 20
	};
	return priorityMap[blockchain] ?? -99;
};
2. Incorrect filtering Logic
  if (lhsPriority > -99) { 
	 if (balance.amount <= 0) {
	   return true;
	 }
  }
  issue  lhsPriority is undefined (incorrect variable references) and condition i think it should be keep balance.amount > 0 and remove all balances <= 0 so filter logic should be reverse.
3.sorting inside useMemo is incorrect
  issue: sort function lacks a return 0 case, making sorting unstable.If leftPriority === rightPriority, sort should return 0 to avoid undefined behavior.
  if (leftPriority > rightPriority) {
		    return -1;
		  } else if (rightPriority > leftPriority) {
		    return 1;
		  }
	=> solution: return leftPriority - rightPriority;
4.useMemo Dependency on prices (Unnecessary Recalculation)
 issue: prices is not used in its computation => Remove prices from the dependency array. 
5.map Operation on sortedBalances Runs Twice
issue: The map function is applied twice on sortedBalances to create formattedBalances and use inside rows for rendering
=> Combine both operations inside useMemo to prevent redundant looping.

After all of that we have refactored code:
const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const balances = useWalletBalances();
  const prices = usePrices();

  const getPriority = (blockchain: any): number => {
    const priorityMapping: Blockchain<any, number> = {
      Osmosis: 100,
      Ethereum: 50,
      Arbitrum: 30,
      Zilliqa: 20,
      Neo: 20
    };
    return priorityMapping[blockchain] ?? -99;
  };

  const sortedBalances = useMemo(() => {
    return balances
      .filter(balance => getPriority(balance.blockchain) > -99 && balance.amount > 0)
      .sort((lhs, rhs) => getPriority(rhs.blockchain) - getPriority(lhs.blockchain));
  }, [balances]);

  const formattedRows = useMemo(() => {
    return sortedBalances.map((balance) => {
      const formatted = balance.amount.toFixed();
      const usdValue = prices[balance.currency] * balance.amount;
      return (
        <WalletRow 
          className={classes.row}
          key={index}
          amount={balance.amount}
          usdValue={usdValue}
          formattedAmount={formatted}
        />
      );
    });
  }, [sortedBalances, prices]);

  return <div {...rest}>{formattedRows}</div>;
};

	